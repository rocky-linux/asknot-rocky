import { render, screen } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';

import Footer from '../Footer';

// Mock the LanguageContext
vi.mock('@/i18n/LanguageContext', () => ({
  useLanguage: () => ({
    translations: {
      footer: {
        generatedBy: 'Generated by',
        inspiredBy: 'Inspired by',
      },
    },
  }),
}));

// Mock the LanguageSelector component
vi.mock('../LanguageSelector', () => ({
  LanguageSelector: () => <div data-testid="language-selector">Language Selector</div>,
}));

describe('Footer', () => {
  it('renders footer with correct role', () => {
    render(<Footer />);
    expect(screen.getByRole('contentinfo')).toBeInTheDocument();
  });

  it('renders asknot-rocky link correctly', () => {
    render(<Footer />);
    const asknotLink = screen.getByRole('link', { name: /asknot-rocky github repository/i });

    expect(asknotLink).toBeInTheDocument();
    expect(asknotLink).toHaveAttribute('href', 'https://github.com/rocky-linux/asknot-rocky');
    expect(asknotLink).toHaveAttribute('target', '_blank');
    expect(asknotLink).toHaveAttribute('rel', 'noopener noreferrer');
  });

  it('renders asknot-ng link correctly', () => {
    render(<Footer />);
    const asknotNgLink = screen.getByRole('link', { name: /asknot-ng github repository/i });

    expect(asknotNgLink).toBeInTheDocument();
    expect(asknotNgLink).toHaveAttribute('href', 'https://github.com/fedora-infra/asknot-ng');
    expect(asknotNgLink).toHaveAttribute('target', '_blank');
    expect(asknotNgLink).toHaveAttribute('rel', 'noopener noreferrer');
  });

  it('renders translated text', () => {
    render(<Footer />);

    expect(screen.getByText(/generated by/i)).toBeInTheDocument();
    expect(screen.getByText(/inspired by/i)).toBeInTheDocument();
  });

  it('includes language selector', () => {
    render(<Footer />);
    expect(screen.getByTestId('language-selector')).toBeInTheDocument();
  });

  it('applies correct styling', () => {
    render(<Footer />);
    const footer = screen.getByRole('contentinfo');
    expect(footer).toHaveClass('text-center', 'py-4');

    const links = screen.getAllByRole('link');
    links.forEach(link => {
      expect(link).toHaveClass('underline', 'hover:text-white', 'transition-colors');
    });
  });
});
